[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b48
fatCubinHandle : 0xa16d20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0xa16d20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0xa16d20
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 175.97 GFlop/s, Time= 108750.977 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 164.444550(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b68
fatCubinHandle : 0x1004d20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1004d20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1004d20
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 159.73 GFlop/s, Time= 134442.641 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 172.240616(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b48
fatCubinHandle : 0x1f1cd20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1f1cd20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1f1cd20
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 134.51 GFlop/s, Time= 142276.094 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 193.845230(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 198.468109
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 202.642120
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b68
fatCubinHandle : 0x1914060
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1914060
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1914060
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 133.03 GFlop/s, Time= 161427.219 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 217.332077(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x401c00
fatCubinHandle : 0x15edc70
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x15edc70
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 250.015320
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x401c00
fatCubinHandle : 0xdcce90
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0xdcce90
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 264.905365
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b48
fatCubinHandle : 0x144ed20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x144ed20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x144ed20
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b48
fatCubinHandle : 0x14eaa20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x14eaa20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x14eaa20
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 175.98 GFlop/s, Time= 108747.953 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 372.844025(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408a70
fatCubinHandle : 0x20fde60
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x20fde60
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x20fde60
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408a70
fatCubinHandle : 0x2199b50
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x2199b50
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x2199b50
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 129.02 GFlop/s, Time= 174228.344 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 390.942719
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408a70
fatCubinHandle : 0x1bd2d20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1bd2d20
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1bd2d20
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408a70
fatCubinHandle : 0x1c6ea30
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1c6ea30
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1c6ea30
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408a70
fatCubinHandle : 0x1b58440
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1b58440
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1b58440
[REPLAY] cudaMalloc               
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 132.11 GFlop/s, Time= 170150.453 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 394.228241
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x401c00
fatCubinHandle : 0xcc5cc0
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0xcc5cc0
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 410.620758
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408a70
fatCubinHandle : 0x2331e60
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x2331e60
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x2331e60
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408a70
fatCubinHandle : 0x23cdb70
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x23cdb70
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x23cdb70
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 169.58 GFlop/s, Time= 132557.094 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 408.755188
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x401c00
fatCubinHandle : 0xaf9cc0
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0xaf9cc0
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 415.633636
[TRACE -runtime-] __cudaUnregisterFatBinary
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x401c00
fatCubinHandle : 0x2309cc0
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x2309cc0
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 440.936310
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 162.23 GFlop/s, Time= 132376.344 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 174.323807(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.72 GFlop/s, Time= 73968.500 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.483513(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.65 GFlop/s, Time= 73987.523 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 113.948486(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 168.39 GFlop/s, Time= 133489.766 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 159.567093
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b48
fatCubinHandle : 0x1790e40
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1790e40
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1790e40
[REPLAY] cudaMalloc               
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.68 GFlop/s, Time= 73980.469 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 160.498245(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x401c00
fatCubinHandle : 0x14ef050
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x14ef050
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 208.473892
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 231.463791
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 196.395889
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.68 GFlop/s, Time= 73979.227 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.200569(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 107.127861
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.69 GFlop/s, Time= 73977.125 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.164230(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b48
fatCubinHandle : 0x188fd80
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x188fd80
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x188fd80
[REPLAY] cudaMalloc               
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 175.97 GFlop/s, Time= 108753.664 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 159.727478(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 159.76 GFlop/s, Time= 134419.812 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 175.462555(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.70 GFlop/s, Time= 83011.430 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.805183(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.63 GFlop/s, Time= 86913.422 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 101.644180
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 249.244003
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 291.082214
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 172.34 GFlop/s, Time= 130430.242 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 156.403748
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.69 GFlop/s, Time= 83012.461 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.793106(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.64 GFlop/s, Time= 86910.680 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 101.691261
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 147.13 GFlop/s, Time= 145955.312 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 186.999222(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.64 GFlop/s, Time= 86912.438 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 101.631805
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 152.34 GFlop/s, Time= 147557.500 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 184.291443
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.69 GFlop/s, Time= 83012.883 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.628143(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 168.39 GFlop/s, Time= 133491.344 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 159.483688
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 96.410416
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 243.344727
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 96.323631
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 228.508911
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 96.168716
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 196.531052
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 171.75 GFlop/s, Time= 130884.492 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 156.880188
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.63 GFlop/s, Time= 73992.617 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.294296(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 107.125900
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 97.307060
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 240.559387
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 159.20 GFlop/s, Time= 134895.375 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 176.242004(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 216.199463
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 96.303200
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 96.535484
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 237.280518
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 107.169594
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 164.40 GFlop/s, Time= 130628.273 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 171.808350(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 106.992149
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 134.73 GFlop/s, Time= 166838.734 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 193.168228
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 127.17 GFlop/s, Time= 168866.516 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 206.147568(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 96.341904
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.70 GFlop/s, Time= 73973.227 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.258789(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 168.28 GFlop/s, Time= 133581.750 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 159.744492
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 236.311646
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 96.204170
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.63 GFlop/s, Time= 86916.195 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 101.766663
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 159.74 GFlop/s, Time= 134439.016 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 175.468948(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.68 GFlop/s, Time= 83016.414 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.642616(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 243.578888
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.66 GFlop/s, Time= 83022.656 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.675690(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 193.275757
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 217.927414
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 106.962730
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.62 GFlop/s, Time= 86917.438 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 101.626282
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 140.87 GFlop/s, Time= 152442.531 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 194.291611(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.70 GFlop/s, Time= 83009.188 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.617439(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 154.48 GFlop/s, Time= 139018.000 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 198.542175(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 97.353256
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 159.31 GFlop/s, Time= 134796.438 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 170.939209(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.65 GFlop/s, Time= 73988.484 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.637650(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 97.299377
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 240.160690
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 147.21 GFlop/s, Time= 145883.000 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 193.758026(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(11200,11200), MatrixB(11200,11200)
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 150.36 GFlop/s, Time= 149499.000 msec, Size= 2809856000000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
[TRACE -runtime-] cudaDeviceReset          
My RESULT : 186.280548
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 164.55 GFlop/s, Time= 130510.367 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 171.781235(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.65 GFlop/s, Time= 73988.594 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.227570(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 97.304489
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 97.501808
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 2: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.72 GFlop/s, Time= 73969.352 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 105.427742(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 200.857086
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 32000
threadNum : 1024
size      : 262144000
vector size : 1048576000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 203.455826
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 216.535828
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 218.009567
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 106.948586
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 1: "Tesla K20c" with compute capability 3.5

MatrixA(10240,10240), MatrixB(20480,10240)
size A : 400
size B : 800
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 234.28 GFlop/s, Time= 91661.750 msec, Size= 4294967296000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 115.409508(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 37000
threadNum : 1024
size      : 303104000
vector size : 1212416000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 133.599258
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 3: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[MOCU] Start mocu_backup()
[MOCU] Finished events update
			THIS REGION WILL NOT BE BACKUPED
			THIS REGION WILL NOT BE BACKUPED
[MOCU] Finished device backup
[REPLAY] cudaMalloc               
[REPLAY] cudaRegisterFatBinary    
fatCubin       : 0x408b48
fatCubinHandle : 0x1fd0e40
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1fd0e40
[REPLAY] cudaRegisterFunction     
fatCubinHandle : 0x1fd0e40
[REPLAY] cudaMalloc               
[REPLAY] cudaMalloc               
			THIS REGION WILL NOT BE RESTORED
			THIS REGION WILL NOT BE RESTORED
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 258.66 GFlop/s, Time= 73985.562 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 113.061882(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
[TRACE -runtime-] __cudaRegisterFunction   
[Matrix Multiply Using CUDA] - Starting...
[TRACE -runtime-] cudaGetDevice            
[TRACE -runtime-] cudaGetDeviceProperties  
GPU Device 0: "Tesla K20c" with compute capability 3.5

MatrixA(14720,14720), MatrixB(14720,14720)
size A : 826
size B : 826
size C : 4
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Computing result using CUDA Kernel...
done
[TRACE -runtime-] cudaDeviceSynchronize    
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventCreate          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventRecord          
[TRACE -runtime-] cudaEventSynchronize     
[TRACE -runtime-] cudaEventElapsedTime     
Performance= 176.11 GFlop/s, Time= 108662.359 msec, Size= 6379012096000 Ops, WorkgroupSize= 1024 threads/block
[TRACE -runtime-] cudaMemcpy               
Checking computed result for correctness: Result = PASS
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 
[TRACE -runtime-] cudaFree                 

Note: For peak performance, please refer to the matrixMulCUBLAS example.
before calling cudaDeviceReset()
[TRACE -runtime-] cudaDeviceReset          
after calling cudaDeviceReset()
My RESULT : 158.778687(matrixMul)
[TRACE -runtime-] __cudaUnregisterFatBinary
[REPLAY] cudaMalloc               
[TRACE -runtime-] __cudaRegisterFatBinary  
[TRACE -runtime-] __cudaRegisterFunction   
blockNum  : 48000
threadNum : 1024
size      : 196608000
vector size : 786432000
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMalloc               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
[TRACE -runtime-] cudaMemcpy               
Result test PASS!
TIME RESULT : 253.863312
[TRACE -runtime-] __cudaUnregisterFatBinary
FINISH!!!!!!!
Result time : 2637.000000[sec]
