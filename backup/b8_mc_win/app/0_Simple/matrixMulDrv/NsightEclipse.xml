<entry>
    <name>Matrix Multiplication (CUDA Driver API Version)</name>
    <description><![CDATA[This sample implements matrix multiplication and uses the new CUDA 4.0 kernel launch Driver API.
It has been written for clarity of exposition to illustrate various CUDA programming principles, not with the goal of providing the most performant generic kernel for matrix multiplication.
CUBLAS provides high-performance matrix multiplication.]]></description>
    <whitepaper></whitepaper>
    <minspec>SM 1.0</minspec>
    <keywords>CUDA,matrix multiply</keywords>
    <scope>1:CUDA Basic Topics,3:Linear Algebra</scope>
    <files>
      <file>data\matrixMul_kernel32.ptx</file>
      <file>data\matrixMul_kernel64.ptx</file>
    </files>
    <cudaapi>cuModuleLoad</cudaapi>
    <cudaapi>cuModuleLoadDataEx</cudaapi>
    <cudaapi>cuModuleGetFunction</cudaapi>
    <cudaapi>cuMemAlloc</cudaapi>
	<cudaapi>cuMemFree</cudaapi>
    <cudaapi>cuMemcpyHtoD</cudaapi>
    <cudaapi>cuMemcpyDtoH</cudaapi>
    <cudaapi>cuLaunchKernel</cudaapi>
    
    <keyconcepts level="basic">CUDA Driver API</keyconcepts>
    <keyconcepts level="basic">Matrix Multiply</keyconcepts>

    <!-- *** Additional project definition information *** -->
    <!-- Libraries that the project should be linked against. Document may contain any number of "libraries" elements. -->
    <!-- Attributes "os" and "arch" are optional and may be used in any combination. -->
    <!-- "framework" attribute will be ignored on platforms other then Mac OS X -->

    <!-- Either absolute or relative to sample -->
    <library os="linux">cuda</library>
    <library os="windows">cuda</library>
    <library os="macosx" framework="true">CUDA</library>
	
    <!-- Either absolute or relative to sample -->
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    
    
    <!-- Can be either "separate" or "whole", omitting this element means that sample can be compiled either way -->
    <devicecompilation>whole</devicecompilation>

    <!-- These options will be passed to NVCC compiler as is and for all files -->
    
    <nvcc-compiler file="matrixMul_kernel.cu">-o matrixMul_kernel.ptx -ptx matrixMul_kernel.cu</nvcc-compiler>

    <!-- These options will be passed to GCC compiler as is and for all files -->
    <gcc-compiler os="darwin" arch="i686"   file="matrixMulDrv.cpp">-arch i686</gcc-compiler>
    <gcc-compiler os="darwin" arch="x86_64" file="matrixMulDrv.cpp">-arch x86_64</gcc-compiler>
    <gcc-compiler os="linux"  arch="i686"   file="matrixMulDrv.cpp">-m32</gcc-compiler>
    <gcc-compiler os="linux"  arch="x86_64" file="matrixMulDrv.cpp">-m64</gcc-compiler>
    <gcc-compiler file="matrixMulDrv.cpp">-o matrixMulDrv.o -c matrixMulDrv.cpp</gcc-compiler>

    <!-- One of "exe|dll|lib" (exe is default) -->
    <type>exe</type>

    <!-- By default IDE will open file "samplename.(cu|cpp) -->
    <primary-file>matrixMulDrv.cpp</primary-file>

    <!-- Collection of [OS][:arch] tokens -->
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm</supported-env>

    <!-- Nsight EE does not support driver API samples import -->
    <no-nsight-eclipse/>
</entry>
